#!/usr/bin/env python3
"""
Automated Executive Report Email Script
Sends weekly PDF reports to Directors and CEOs
"""
import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from flask import render_template
from datetime import datetime
from app import app, db
from models import User, Problem, BusinessCase, Project, Department, AuditLog, OrganizationSettings

def generate_executive_pdf_report():
    """Generate PDF report with current metrics"""
    with app.app_context():
        # Get currency symbol from organization settings
        currency_symbol = "$"
        try:
            org_settings = OrganizationSettings.query.first()
            if org_settings and org_settings.currency:
                currency_symbols = {
                    'USD': '$', 'EUR': '‚Ç¨', 'GBP': '¬£', 'CAD': 'C$',
                    'AUD': 'A$', 'JPY': '¬•', 'CNY': '¬•', 'INR': '‚Çπ'
                }
                currency_symbol = currency_symbols.get(org_settings.currency, '$')
        except:
            pass

        # Get organization-wide metrics for CEO/Admin level report
        cases = BusinessCase.query
        projects = Project.query
        departments = Department.query.all()

        case_stats = []
        for dept in departments:
            dept_cases = BusinessCase.query.filter_by(dept_id=dept.id)
            case_stats.append({
                "name": dept.name,
                "total": dept_cases.count(),
                "approved": dept_cases.filter_by(status="Approved").count(),
                "rejected": dept_cases.filter_by(status="Rejected").count(),
                "pending": dept_cases.filter_by(status="Submitted").count()
            })

        # Render HTML for PDF generation
        html = render_template("dashboards/executive_dashboard_pdf.html",
            case_count=cases.count(),
            project_count=projects.count(),
            problem_count=Problem.query.filter_by(status="Open").count(),
            total_budget=sum([p.budget or 0 for p in projects]),
            case_stats=case_stats,
            projects=projects.all(),
            currency_symbol=currency_symbol,
            watermark="Generated by DeciFrame",
            generated_date=datetime.now().strftime("%Y-%m-%d %H:%M"),
            user_name="Executive Team"
        )

        try:
            from weasyprint import HTML
            pdf_content = HTML(string=html).write_pdf()
            return pdf_content
        except ImportError:
            print("‚ùå WeasyPrint not available - PDF generation skipped")
            return None
        except Exception as e:
            print(f"‚ùå PDF generation failed: {str(e)}")
            return None

def send_weekly_reports():
    """Send weekly executive reports to Directors and CEOs"""
    with app.app_context():
        # Get all executives (Directors and CEOs)
        executives = User.query.filter(
            User.role.in_(['Director', 'CEO'])
        ).all()

        if not executives:
            print("‚ÑπÔ∏è No executives found to send reports to")
            return

        # Generate PDF report
        pdf_content = generate_executive_pdf_report()
        if not pdf_content:
            print("‚ùå Could not generate PDF report - email sending skipped")
            return

        # Check if email is configured
        sendgrid_key = os.environ.get('SENDGRID_API_KEY')
        if not sendgrid_key:
            print("‚ö†Ô∏è SENDGRID_API_KEY not configured - email sending skipped")
            # Still log the automation attempt
            for exec_user in executives:
                audit_log = AuditLog(
                    user_id=exec_user.id,
                    action="email_report_scheduled",
                    module="Executive Dashboard",
                    target="weekly_report",
                    details="Weekly executive report scheduled (email not sent - no SENDGRID_API_KEY)",
                    timestamp=datetime.utcnow()
                )
                db.session.add(audit_log)
            db.session.commit()
            return

        # Send emails to each executive
        try:
            from sendgrid import SendGridAPIClient
            from sendgrid.helpers.mail import Mail, Attachment
            import base64

            sg = SendGridAPIClient(sendgrid_key)
            
            for exec_user in executives:
                # Create email message
                message = Mail(
                    from_email='reports@deciframe.com',
                    to_emails=exec_user.email,
                    subject=f'üìä Weekly Executive Report - {datetime.now().strftime("%B %d, %Y")}',
                    html_content=f'''
                    <h2>Weekly Executive Dashboard Report</h2>
                    <p>Dear {exec_user.first_name} {exec_user.last_name},</p>
                    <p>Please find attached your weekly executive dashboard report from DeciFrame.</p>
                    <p>This report contains current metrics for business cases, projects, budget allocation, and department performance.</p>
                    <p>Best regards,<br>DeciFrame Business Intelligence Platform</p>
                    '''
                )

                # Attach PDF report
                encoded_pdf = base64.b64encode(pdf_content).decode()
                attachment = Attachment(
                    file_content=encoded_pdf,
                    file_type="application/pdf",
                    file_name=f"DeciFrame_Executive_Report_{datetime.now().strftime('%Y%m%d')}.pdf",
                    disposition="attachment"
                )
                message.attachment = attachment

                # Send email
                response = sg.send(message)
                
                if response.status_code == 202:
                    print(f"‚úÖ Report sent to {exec_user.email}")
                    
                    # Log successful email sending
                    audit_log = AuditLog(
                        user_id=exec_user.id,
                        action="email_report_sent",
                        module="Executive Dashboard",
                        target="weekly_report",
                        details=f"Weekly executive report emailed to {exec_user.email}",
                        timestamp=datetime.utcnow()
                    )
                    db.session.add(audit_log)
                else:
                    print(f"‚ùå Failed to send report to {exec_user.email}: HTTP {response.status_code}")
                    
                    # Log failed email sending
                    audit_log = AuditLog(
                        user_id=exec_user.id,
                        action="email_report_failed",
                        module="Executive Dashboard",
                        target="weekly_report",
                        details=f"Failed to email weekly report to {exec_user.email}: HTTP {response.status_code}",
                        timestamp=datetime.utcnow()
                    )
                    db.session.add(audit_log)

            db.session.commit()
            print(f"üìß Weekly report automation completed for {len(executives)} executives")

        except Exception as e:
            print(f"‚ùå Email sending failed: {str(e)}")
            
            # Log the automation failure
            for exec_user in executives:
                audit_log = AuditLog(
                    user_id=exec_user.id,
                    action="email_report_error",
                    module="Executive Dashboard",
                    target="weekly_report",
                    details=f"Weekly report automation failed: {str(e)}",
                    timestamp=datetime.utcnow()
                )
                db.session.add(audit_log)
            db.session.commit()

if __name__ == "__main__":
    print(f"üöÄ Starting weekly executive report automation at {datetime.now()}")
    send_weekly_reports()
    print("‚úÖ Weekly executive report automation completed")